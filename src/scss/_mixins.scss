@mixin setSize($size, $height: $size) {
  @media (orientation: landscape) {
    width: calc(1vh * $size);

    @if $height {
      height: calc(1vh * $height);
    }

    @else {
      height: calc(1vh * $size);
    }
  }

  @media (orientation: portrait) {
    width: calc(1vw * $size);

    @if $height {
      height: calc(1vw * $height);
    }

    @else {
      height: calc(1vw * $size);
    }
  }
}

@mixin handBase {
  width        : 1px;
  height       : 1px;
  border-radius: 44%;
}

@mixin setSizeHand($size, $color: black) {
  @media (orientation: landscape) {
    @include handBase;
    translate    : 0 calc((-1vh * $size) / 3);
    border-bottom: calc(1vh * $size) solid $color;
    border-left  : calc((1vh * $size) / 15) solid transparent;
    border-right : calc((1vh * $size) / 15) solid transparent;
  }

  @media (orientation: portrait) {
    @include handBase;
    translate    : 0 calc((-1vw * $size / 3));
    border-bottom: calc(1vw * $size) solid $color;
    border-left  : calc((1vw * $size) / 15) solid transparent;
    border-right : calc((1vw * $size) / 15) solid transparent;
  }
}

@mixin setSizeFont($size) {
  @media (orientation: landscape) {
    font-size: 1vh * $size;
  }

  @media (orientation: portrait) {
    font-size: 1vw * $size;
  }
}

/// Mixin to place items on a circle
/// sass full version https://css-tricks.com/snippets/sass/placing-items-circle/
/// inspired by Ana Tudor's https://stackoverflow.com/a/12817454/13608849
/// @author Kitty Giraudel
/// @author Ana Tudor
/// @param {Integer} $item-count - Number of items on the circle
/// @param {Length} $circle-size - Large circle size
/// @param {Length} $item-size - Single item size
@mixin on-circle_marks($item-count, $circle-size) {
  border-radius: 50%;

  >* {
    top : 46%;
    left: 48%;

    $angle: calc(360 / $item-count);
    $rot  : 0;

    @for $i from 1 through $item-count {
      &:nth-of-type(#{$i}) {
        @media (orientation: landscape) {
          transform:
            rotate($rot * 1deg) translate(calc((1vh * $circle-size) / 2)) rotate(90deg);
        }

        @media (orientation: portrait) {
          transform:
            rotate($rot * 1deg) translate((calc((1vw * $circle-size) / 2))) rotate(90deg);
        }
      }

      $rot: $rot+$angle;
    }
  }
}

@mixin on-circle_numbers($item-count, $circle-size) {
  border-radius: 50%;

  >* {
    top : 42.5%;
    left: 41%;

    $angle           : calc(360 / $item-count);
    $rot             : 0;
    $order-correction: 60deg;

    @for $i from 1 through $item-count {
      &:nth-of-type(#{$i}) {
        @media (orientation: landscape) {
          transform:
            rotate($rot * 1deg - $order-correction) translate(calc((.95vh * $circle-size) / 2)) rotate($rot * -1deg + $order-correction);
        }

        @media (orientation: portrait) {
          transform:
            rotate($rot * 1deg - $order-correction) translate(calc((.95vw * $circle-size) / 2)) rotate($rot * -1deg + $order-correction);
        }
      }

      $rot: $rot+$angle;
    }
  }
}